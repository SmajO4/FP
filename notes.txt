Ako se desi greska
remote:
remote: ========================================================================
remote:
remote: ERROR: The project you were looking for could not be found or you don't have permission to view it.

remote:
remote: ========================================================================
remote:
fatal: Could not read from remote repository.


  git remote set-url origin git@github.com:SmajO4/FP.git


Instaliranje i podesavanje git-a

  sudo dnf install git
  git --version
  git config --global user.name "Tvoje Ime"
  git config --global user.email "tvoj@email.com"
  git config --global init.defaultBranch main   # da default grana bude 'main'


Podesavanje SSH pristupa GitHub-u

  ssh-keygen -t ed25519 -C "tvoj@email.com"
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_ed25519
  cat ~/.ssh/id_ed25519.pub    # kopiraj izlaz

Na GitHubu: Settings → SSH and GPG keys → New SSH key → nalijepi sadržaj iz id_ed25519.pub.

TEST:
ssh -T git@github.com


___________________________________________________________________________________________

2) Pošalji POSTOJEĆI lokalni folder na repo FP

Pretpostavimo da već imaš lokalni folder sa fajlovima (npr. /home/korisnik/projekti/FP-lokalno):

  cd /home/korisnik/projekti/FP-lokalno
  git init
  git branch -M main
  # DODAJ REMOTE (izaberi JEDNU od dvije linije ispod)

  # SSH varijanta (preporučeno):
  git remote add origin git@github.com:SmajO4/FP.git

  # ili HTTPS varijanta:
  # git remote add origin https://github.com/SmajO4/FP.git


A) Ako je GitHub repo PRAZAN

  git add .
  git commit -m "Initial commit"
  git push -u origin main



B) Ako repo NA GITHUBU već ima npr. README/.gitignore (nije prazan)

Moraš prvo povući šta je na GitHubu pa onda gurnuti svoje izmjene:

  git fetch origin
  git pull --rebase origin main   # spoji istoriju bez dodatnog merge commita
  # (ako dođe do konflikata, riješi ih, pa:)
  git add .
  git rebase --continue           # dok ne završi rebase
  git push -u origin main


Ako tek praviš repo i slučajno si dodao README na GitHubu, ovo je najčistiji način da izbjegneš “non-fast-forward” grešku.


___________________________________________________________________________________________

3) Svakodnevni rad (dodavanje i slanje izmjena)

Kad promijeniš/dodaš fajlove:

  git status                 # vidiš šta je promijenjeno
  git add .                  # ili npr. git add src/app.py
  git commit -m "Kratak opis izmjene"
  git pull --rebase origin main   # povuci tuđe promjene ako ih ima
  git push                      # gurni svoje na GitHub


Korisno: ako si na novoj mašini i želiš povući projekat:

  git clone git@github.com:SmajO4/FP.git   # (ili HTTPS URL)
  cd FP


___________________________________________________________________________________________

4) .gitignore (izbjegni da šalješ build/temp fajlove)

U root projekta kreiraj .gitignore:
  nano .gitignore


Primjeri unosa:
  # Python
  __pycache__/
  *.pyc
  .env

  # Node
  node_modules/
  dist/

Zatim:
  git add .gitignore
  git commit -m "Add .gitignore"
  git push

___________________________________________________________________________________________

5) Česta upozorenja i rješenja

fatal: remote origin already exists
Već si dodao remote. Provjeri/adaptiraj URL:

  git remote -v
  git remote set-url origin git@github.com:SmajO4/FP.git

non-fast-forward / odbijen push
Uradi:
  git pull --rebase origin main
  # riješi konflikte ako ih ima
  git push


Permission denied (publickey)
Nije učitan SSH ključ:
  ssh-add -l               # vidi da li je dodan
  ssh-add ~/.ssh/id_ed25519

HTTPS traži lozinku
GitHub više traži Personal Access Token umjesto lozinke. Napravi token u Settings → Developer settings → Personal access tokens (classic) i koristi ga kao “password”.
(Možeš i sačuvati kredencijale:)
  git config --global credential.helper store

6) Mini “cheat sheet”
  # Inicijalizacija i povezivanje:
  git init
  git branch -M main
  git remote add origin git@github.com:SmajO4/FP.git

  # Prvi push:
  git add .
  git commit -m "Initial commit"
  git push -u origin main

  # Svakodnevno:
  git status
  git add .
  git commit -m "Opis promjene"
  git pull --rebase origin main
  git push


